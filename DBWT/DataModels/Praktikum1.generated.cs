//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

using Newtonsoft.Json;

namespace DataModels
{
	/// <summary>
	/// Database       : emensa
	/// Data Source    : localhost
	/// Server Version : 5.5.5-10.3.10-MariaDB
	/// </summary>
	public partial class EmensaDB : LinqToDB.Data.DataConnection
	{
		public ITable<Benutzer>                    Benutzer                    { get { return this.GetTable<Benutzer>(); } }
		public ITable<Benutzermbenutzern>          Benutzermbenutzern          { get { return this.GetTable<Benutzermbenutzern>(); } }
		public ITable<Bestellungen>                Bestellungen                { get { return this.GetTable<Bestellungen>(); } }
		public ITable<Bilder>                      Bilder                      { get { return this.GetTable<Bilder>(); } }
		public ITable<Deklarationen>               Deklarationen               { get { return this.GetTable<Deklarationen>(); } }
		public ITable<Fachbereiche>                Fachbereiche                { get { return this.GetTable<Fachbereiche>(); } }
		public ITable<Fachbereichemfhangehoerigen> Fachbereichemfhangehoerigen { get { return this.GetTable<Fachbereichemfhangehoerigen>(); } }
		public ITable<Fhangehoerige>               Fhangehoerige               { get { return this.GetTable<Fhangehoerige>(); } }
		public ITable<Gaeste>                      Gaeste                      { get { return this.GetTable<Gaeste>(); } }
		public ITable<Kategorien>                  Kategorien                  { get { return this.GetTable<Kategorien>(); } }
		public ITable<Kommentare>                  Kommentare                  { get { return this.GetTable<Kommentare>(); } }
		public ITable<Mahlzeiten>                  Mahlzeiten                  { get { return this.GetTable<Mahlzeiten>(); } }
		public ITable<Mahlzeitenmbestellungenn>    Mahlzeitenmbestellungenn    { get { return this.GetTable<Mahlzeitenmbestellungenn>(); } }
		public ITable<Mahlzeitenmbildern>          Mahlzeitenmbildern          { get { return this.GetTable<Mahlzeitenmbildern>(); } }
		public ITable<Mahlzeitenmdeklarationenn>   Mahlzeitenmdeklarationenn   { get { return this.GetTable<Mahlzeitenmdeklarationenn>(); } }
		public ITable<Mahlzeitenmzutatenn>         Mahlzeitenmzutatenn         { get { return this.GetTable<Mahlzeitenmzutatenn>(); } }
		public ITable<Mitarbeiter>                 Mitarbeiter                 { get { return this.GetTable<Mitarbeiter>(); } }
		public ITable<Preise>                      Preise                      { get { return this.GetTable<Preise>(); } }
		public ITable<Studenten>                   Studenten                   { get { return this.GetTable<Studenten>(); } }
		public ITable<Unterkategorien>             Unterkategorien             { get { return this.GetTable<Unterkategorien>(); } }
		public ITable<Zutaten>                     Zutaten                     { get { return this.GetTable<Zutaten>(); } }

		public void InitMappingSchema()
		{
		}

		public EmensaDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public EmensaDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext();
	}

	[Table("benutzer")]
	public partial class Benutzer
	{
		[Column(),                PrimaryKey,  Identity] public int       Nummer       { get; set; } // int(11)
		[Column(),                NotNull              ] public string    Vorname      { get; set; } // varchar(100)
		[Column(),                NotNull              ] public string    Nachname     { get; set; } // varchar(100)
		[Column(),                NotNull              ] public string    Nutzername   { get; set; } // varchar(100)
		[Column(),                NotNull              ] public string    EMail        { get; set; } // varchar(255)
		[Column("Letzter_Login"), NotNull              ] public DateTime  LetzterLogin { get; set; } // timestamp
		[Column(),                NotNull              ] public DateTime  Anlegedatum  { get; set; } // date
		[Column(),                NotNull              ] public bool      Aktiv        { get; set; } // tinyint(1)
		[Column(),                   Nullable          ] public DateTime? Geburtsdatum { get; set; } // date
		[Column(),                   Nullable          ] public sbyte?    Alter        { get; set; } // tinyint(4)
		[Column(),                NotNull              ] public string    Hash         { get; set; } // char(24)
		[Column(),                NotNull              ] public string    Salt         { get; set; } // char(32)

		#region Associations

		/// <summary>
		/// Benutzer1-BestellungenN_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="BenutzerNummer", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Bestellungen> Benutzer1BestellungenN { get; set; }

		/// <summary>
		/// BenutzerM-BenutzerN_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="BenutzerNummerM", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Benutzermbenutzern> BenutzerMBenutzerN { get; set; }

		/// <summary>
		/// BenutzerN-BenutzerM_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="BenutzerNummerN", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Benutzermbenutzern> BenutzerNBenutzerM { get; set; }

		/// <summary>
		/// FHAngehoerige ISA Benutzer_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="ID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Fhangehoerige FHAngehoerigeISABenutzer { get; set; }

		/// <summary>
		/// Gaeste ISA Benutzer_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="ID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Gaeste GaesteISABenutzer { get; set; }

		/// <summary>
		/// Student -ODER-> ID_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="ID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Studenten StudentODERId { get; set; }

		#endregion
	}

	[Table("benutzermbenutzern")]
	public partial class Benutzermbenutzern
	{
		[PrimaryKey(1), NotNull] public int BenutzerNummerM { get; set; } // int(11)
		[PrimaryKey(2), NotNull] public int BenutzerNummerN { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// BenutzerM-BenutzerN
		/// </summary>
		[Association(ThisKey="BenutzerNummerM", OtherKey="Nummer", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BenutzerM-BenutzerN", BackReferenceName="BenutzerMBenutzerN")]
		public Benutzer BenutzerMBenutzerN { get; set; }

		/// <summary>
		/// BenutzerN-BenutzerM
		/// </summary>
		[Association(ThisKey="BenutzerNummerN", OtherKey="Nummer", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="BenutzerN-BenutzerM", BackReferenceName="BenutzerNBenutzerM")]
		public Benutzer BenutzerNBenutzerM { get; set; }

		#endregion
	}

	[Table("bestellungen")]
	public partial class Bestellungen
	{
		[PrimaryKey, NotNull    ] public int      Nummer           { get; set; } // int(11)
		[Column,     NotNull    ] public DateTime Bestellzeitpunkt { get; set; } // timestamp
		[Column,     NotNull    ] public DateTime Abholzeitpunkt   { get; set; } // timestamp
		[Column,        Nullable] public int?     BenutzerNummer   { get; set; } // int(11)
		[Column,        Nullable] public decimal? Endpreis         { get; set; } // decimal(6,2)

		#region Associations

		/// <summary>
		/// Benutzer1-BestellungenN
		/// </summary>
		[Association(ThisKey="BenutzerNummer", OtherKey="Nummer", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Benutzer1-BestellungenN", BackReferenceName="Benutzer1BestellungenN"), JsonIgnore]
        public Benutzer Benutzer1BestellungenN { get; set; }

		/// <summary>
		/// Bestellungen-Mahlzeiten_BackReference
		/// </summary>
		[Association(ThisKey="Nummer", OtherKey="BestellungsNummer", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), JsonIgnore]
        public IEnumerable<Mahlzeitenmbestellungenn> BestellungenMahlzeitens { get; set; }

		#endregion
	}

	[Table("bilder")]
	public partial class Bilder
	{
		[PrimaryKey, Identity   ] public int    ID          { get; set; } // int(11)
		[Column,     NotNull    ] public string AltText     { get; set; } // varchar(255)
		[Column,        Nullable] public string Titel       { get; set; } // varchar(255)
		[Column,     NotNull    ] public byte[] Binaerdaten { get; set; } // mediumblob

		#region Associations

		/// <summary>
		/// Bild1-KategorienN_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="Bild", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Kategorien> Bild1KategorienN { get; set; }

		/// <summary>
		/// Bild-Mahlzeiten_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="BildID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmbildern> BildMahlzeitens { get; set; }

		#endregion
	}

	[Table("deklarationen")]
	public partial class Deklarationen
	{
		[PrimaryKey, NotNull] public string Zeichen      { get; set; } // varchar(2)
		[Column,     NotNull] public string Beschriftung { get; set; } // varchar(32)

		#region Associations

		/// <summary>
		/// Deklarationen-Mahlzeiten_BackReference
		/// </summary>
		[Association(ThisKey="Zeichen", OtherKey="Deklaration", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmdeklarationenn> DeklarationenMahlzeitens { get; set; }

		#endregion
	}

	[Table("fachbereiche")]
	public partial class Fachbereiche
	{
		[PrimaryKey, Identity] public int    ID      { get; set; } // int(11)
		[Column,     NotNull ] public string Name    { get; set; } // varchar(50)
		[Column,     NotNull ] public string Website { get; set; } // varchar(255)
		[Column,     NotNull ] public string Adresse { get; set; } // varchar(255)

		#region Associations

		/// <summary>
		/// Fachbereiche-FHAngehoerige_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="FachbereicheID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Fachbereichemfhangehoerigen> FachbereicheFHAngehoeriges { get; set; }

		#endregion
	}

	[Table("fachbereichemfhangehoerigen")]
	public partial class Fachbereichemfhangehoerigen
	{
		[PrimaryKey(1), NotNull] public int FachbereicheID  { get; set; } // int(11)
		[PrimaryKey(2), NotNull] public int FHAngehoerigeID { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Fachbereiche-FHAngehoerige
		/// </summary>
		[Association(ThisKey="FachbereicheID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Fachbereiche-FHAngehoerige", BackReferenceName="FachbereicheFHAngehoeriges")]
		public Fachbereiche Fachbereiche { get; set; }

		/// <summary>
		/// FHAngehoerige-Fachbereiche
		/// </summary>
		[Association(ThisKey="FHAngehoerigeID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FHAngehoerige-Fachbereiche", BackReferenceName="FHAngehoerigeFachbereiches")]
		public Fhangehoerige FHAngehoerige { get; set; }

		#endregion
	}

	[Table("fhangehoerige")]
	public partial class Fhangehoerige
	{
		[PrimaryKey, NotNull] public int ID { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// FHAngehoerige ISA Benutzer
		/// </summary>
		[Association(ThisKey="ID", OtherKey="Nummer", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FHAngehoerige ISA Benutzer", BackReferenceName="FHAngehoerigeISABenutzer")]
		public Benutzer Benutzer { get; set; }

		/// <summary>
		/// FHAngehoerige-Fachbereiche_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="FHAngehoerigeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Fachbereichemfhangehoerigen> FHAngehoerigeFachbereiches { get; set; }

		/// <summary>
		/// Mitarbeiter -ODER-> ID_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Mitarbeiter MitarbeiterODERId { get; set; }

		#endregion
	}

	[Table("gaeste")]
	public partial class Gaeste
	{
		[PrimaryKey, NotNull] public int      ID          { get; set; } // int(11)
		[Column,     NotNull] public string   Grund       { get; set; } // varchar(255)
		[Column,     NotNull] public DateTime Ablaufdatum { get; set; } // date

		#region Associations

		/// <summary>
		/// Gaeste ISA Benutzer
		/// </summary>
		[Association(ThisKey="ID", OtherKey="Nummer", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="Gaeste ISA Benutzer", BackReferenceName="GaesteISABenutzer")]
		public Benutzer Benutzer { get; set; }

		#endregion
	}

	[Table("kategorien")]
	public partial class Kategorien
	{
		[PrimaryKey, Identity   ] public int    ID          { get; set; } // int(11)
		[Column,     NotNull    ] public string Bezeichnung { get; set; } // varchar(255)
		[Column,        Nullable] public int?   Bild        { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Bild1-KategorienN
		/// </summary>
		[Association(ThisKey="Bild", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Bild1-KategorienN", BackReferenceName="Bild1KategorienN")]
		public Bilder Bild1KategorienN { get; set; }

		/// <summary>
		/// Kategorien1-MahlzeitenN_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="KategorienID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeiten> Kategorien1MahlzeitenN { get; set; }

		/// <summary>
		/// Kategorie_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Unterkategorien> Kategories { get; set; }

		/// <summary>
		/// Unterkategorie_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="UnterkategorieID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Unterkategorien> Unterkategories { get; set; }

		#endregion
	}

	[Table("kommentare")]
	public partial class Kommentare
	{
		[PrimaryKey, Identity   ] public int    ID           { get; set; } // int(11)
		[Column,        Nullable] public string Bemerkung    { get; set; } // varchar(255)
		[Column,     NotNull    ] public char   Bewertung    { get; set; } // enum('1','2','3','4','5')
		[Column,        Nullable] public int?   StudentenID  { get; set; } // int(11)
		[Column,        Nullable] public int?   MahlzeitenID { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Mahlzeiten1-KommentareN
		/// </summary>
		[Association(ThisKey="MahlzeitenID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Mahlzeiten1-KommentareN", BackReferenceName="Mahlzeiten1KommentareN")]
		public Mahlzeiten Mahlzeiten { get; set; }

		/// <summary>
		/// Studenten1-KommentareN
		/// </summary>
		[Association(ThisKey="StudentenID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Studenten1-KommentareN", BackReferenceName="Studenten1KommentareN")]
		public Studenten Studenten { get; set; }

		#endregion
	}

	[Table("mahlzeiten")]
	public partial class Mahlzeiten
	{
		[PrimaryKey, Identity   ] public int    ID           { get; set; } // int(11)
		[Column,     NotNull    ] public string Beschreibung { get; set; } // varchar(255)
		[Column,     NotNull    ] public short  Vorrat       { get; set; } // smallint(6)
		[Column,        Nullable] public int?   KategorienID { get; set; } // int(11)
		[Column,        Nullable] public bool?  Verfuegbar   { get; set; } // tinyint(1)
		[Column,     NotNull    ] public string Name         { get; set; } // varchar(255)

		#region Associations

		/// <summary>
		/// Kategorien1-MahlzeitenN
		/// </summary>
		[Association(ThisKey="KategorienID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Kategorien1-MahlzeitenN", BackReferenceName="Kategorien1MahlzeitenN")]
		public Kategorien Kategorien { get; set; }

		/// <summary>
		/// Mahlzeiten1-KommentareN_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="MahlzeitenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Kommentare> Mahlzeiten1KommentareN { get; set; }

		/// <summary>
		/// Mahlzeiten-Bestellungen_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="MahlzeitenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmbestellungenn> MahlzeitenBestellungens { get; set; }

		/// <summary>
		/// Mahlzeiten-Bild_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="MahlzeitenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmbildern> MahlzeitenBilds { get; set; }

		/// <summary>
		/// Mahlzeiten-Deklarationen_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="MahlzeitenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmdeklarationenn> MahlzeitenDeklarationens { get; set; }

		/// <summary>
		/// Mahlzeiten-Preise_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="MahlzeitenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Preise> MahlzeitenPreises { get; set; }

		/// <summary>
		/// Mahlzeiten-Zutaten_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="MahlzeitenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmzutatenn> MahlzeitenZutatens { get; set; }

		#endregion
	}

	[Table("mahlzeitenmbestellungenn")]
	public partial class Mahlzeitenmbestellungenn
	{
		[Column, Nullable] public int? MahlzeitenID      { get; set; } // int(11)
		[Column, Nullable] public int? BestellungsNummer { get; set; } // int(11)
		[Column, Nullable] public int? Anzahl            { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Bestellungen-Mahlzeiten
		/// </summary>
		[Association(ThisKey="BestellungsNummer", OtherKey="Nummer", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Bestellungen-Mahlzeiten", BackReferenceName="BestellungenMahlzeitens")]
		public Bestellungen BestellungenMahlzeiten { get; set; }

		/// <summary>
		/// Mahlzeiten-Bestellungen
		/// </summary>
		[Association(ThisKey="MahlzeitenID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="Mahlzeiten-Bestellungen", BackReferenceName="MahlzeitenBestellungens")]
		public Mahlzeiten Mahlzeiten { get; set; }

		#endregion
	}

	[Table("mahlzeitenmbildern")]
	public partial class Mahlzeitenmbildern
	{
		[PrimaryKey(1), NotNull] public int MahlzeitenID { get; set; } // int(11)
		[PrimaryKey(2), NotNull] public int BildID       { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Bild-Mahlzeiten
		/// </summary>
		[Association(ThisKey="BildID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Bild-Mahlzeiten", BackReferenceName="BildMahlzeitens")]
		public Bilder Bild { get; set; }

		/// <summary>
		/// Mahlzeiten-Bild
		/// </summary>
		[Association(ThisKey="MahlzeitenID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Mahlzeiten-Bild", BackReferenceName="MahlzeitenBilds")]
		public Mahlzeiten Mahlzeiten { get; set; }

		#endregion
	}

	[Table("mahlzeitenmdeklarationenn")]
	public partial class Mahlzeitenmdeklarationenn
	{
		[PrimaryKey(1), NotNull] public int    MahlzeitenID { get; set; } // int(11)
		[PrimaryKey(2), NotNull] public string Deklaration  { get; set; } // varchar(2)

		#region Associations

		/// <summary>
		/// Deklarationen-Mahlzeiten
		/// </summary>
		[Association(ThisKey="Deklaration", OtherKey="Zeichen", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Deklarationen-Mahlzeiten", BackReferenceName="DeklarationenMahlzeitens")]
		public Deklarationen DeklarationenMahlzeiten { get; set; }

		/// <summary>
		/// Mahlzeiten-Deklarationen
		/// </summary>
		[Association(ThisKey="MahlzeitenID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Mahlzeiten-Deklarationen", BackReferenceName="MahlzeitenDeklarationens")]
		public Mahlzeiten Mahlzeiten { get; set; }

		#endregion
	}

	[Table("mahlzeitenmzutatenn")]
	public partial class Mahlzeitenmzutatenn
	{
		[PrimaryKey(1), NotNull] public int MahlzeitenID { get; set; } // int(11)
		[PrimaryKey(2), NotNull] public int ZutatenID    { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Mahlzeiten-Zutaten
		/// </summary>
		[Association(ThisKey="MahlzeitenID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Mahlzeiten-Zutaten", BackReferenceName="MahlzeitenZutatens")]
		public Mahlzeiten Mahlzeiten { get; set; }

		/// <summary>
		/// Zutaten-Mahlzeiten
		/// </summary>
		[Association(ThisKey="ZutatenID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Zutaten-Mahlzeiten", BackReferenceName="ZutatenMahlzeitens")]
		public Zutaten Zutaten { get; set; }

		#endregion
	}

	[Table("mitarbeiter")]
	public partial class Mitarbeiter
	{
		[PrimaryKey, NotNull    ] public int    ID      { get; set; } // int(11)
		[Column,        Nullable] public int?   Telefon { get; set; } // int(11)
		[Column,        Nullable] public string Buero   { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// Mitarbeiter -ODER-> ID
		/// </summary>
		[Association(ThisKey="ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="Mitarbeiter -ODER-> ID", BackReferenceName="MitarbeiterODERId")]
		public Fhangehoerige Fhangehoerige { get; set; }

		#endregion
	}

	[Table("preise")]
	public partial class Preise
	{
		[PrimaryKey(1), NotNull    ] public int      Jahr         { get; set; } // year(4)
		[PrimaryKey(2), NotNull    ] public int      MahlzeitenID { get; set; } // int(11)
		[Column,        NotNull    ] public decimal  Gastpreis    { get; set; } // decimal(4,2)
		[Column,           Nullable] public decimal? Studentpreis { get; set; } // decimal(4,2)
		[Column,           Nullable] public decimal? MAPreis      { get; set; } // decimal(4,2)

		#region Associations

		/// <summary>
		/// Mahlzeiten-Preise
		/// </summary>
		[Association(ThisKey="MahlzeitenID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Mahlzeiten-Preise", BackReferenceName="MahlzeitenPreises")]
		public Mahlzeiten Mahlzeiten { get; set; }

		#endregion
	}

	[Table("studenten")]
	public partial class Studenten
	{
		[PrimaryKey, NotNull] public int    ID             { get; set; } // int(11)
		[Column,     NotNull] public string Studiengang    { get; set; } // enum('ET','INF','ISE','MCD','WI')
		[Column,     NotNull] public int    Matrikelnummer { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Student -ODER-> ID
		/// </summary>
		[Association(ThisKey="ID", OtherKey="Nummer", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="Student -ODER-> ID", BackReferenceName="StudentODERId")]
		public Benutzer Benutzer { get; set; }

		/// <summary>
		/// Studenten1-KommentareN_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="StudentenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Kommentare> Studenten1KommentareN { get; set; }

		#endregion
	}

	[Table("unterkategorien")]
	public partial class Unterkategorien
	{
		[PrimaryKey(1), NotNull] public int ID               { get; set; } // int(11)
		[PrimaryKey(2), NotNull] public int UnterkategorieID { get; set; } // int(11)

		#region Associations

		/// <summary>
		/// Kategorie
		/// </summary>
		[Association(ThisKey="ID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Kategorie", BackReferenceName="Kategories")]
		public Kategorien Kategorien { get; set; }

		/// <summary>
		/// Unterkategorie
		/// </summary>
		[Association(ThisKey="UnterkategorieID", OtherKey="ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="Unterkategorie", BackReferenceName="Unterkategories")]
		public Kategorien Unterkategorie { get; set; }

		#endregion
	}

	[Table("zutaten")]
	public partial class Zutaten
	{
		[PrimaryKey, NotNull] public int    ID          { get; set; } // int(11)
		[Column,     NotNull] public string Name        { get; set; } // varchar(100)
		[Column,     NotNull] public bool   Bio         { get; set; } // tinyint(1)
		[Column,     NotNull] public bool   Vegetarisch { get; set; } // tinyint(1)
		[Column,     NotNull] public bool   Vegan       { get; set; } // tinyint(1)
		[Column,     NotNull] public bool   Glutenfrei  { get; set; } // tinyint(1)

		#region Associations

		/// <summary>
		/// Zutaten-Mahlzeiten_BackReference
		/// </summary>
		[Association(ThisKey="ID", OtherKey="ZutatenID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Mahlzeitenmzutatenn> ZutatenMahlzeitens { get; set; }

		#endregion
	}

	public static partial class EmensaDBStoredProcedures
	{
		#region Nutzerrolle

		public static int Nutzerrolle(this DataConnection dataConnection, int? ID, out string Rolle)
		{
			var ret = dataConnection.ExecuteProc("`Nutzerrolle`",
				new DataParameter("ID",    ID,    DataType.Int32),
				new DataParameter("Rolle", null, DataType.Char) { Direction = ParameterDirection.Output });

			Rolle = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["Rolle"]).Value);

			return ret;
		}

		#endregion

		#region NutzerrolleOutput

		public static IEnumerable<NutzerrolleOutputResult> NutzerrolleOutput(this DataConnection dataConnection, int? ID)
		{
			return dataConnection.QueryProc<NutzerrolleOutputResult>("`NutzerrolleOutput`",
				new DataParameter("ID", ID, DataType.Int32));
		}

		public partial class NutzerrolleOutputResult
		{
			public string Rolle { get; set; }
		}

		#endregion

		#region Preis

		public static IEnumerable<PreisResult> Preis(this DataConnection dataConnection, int? BenutzerNummer, int? MahlzeitenID)
		{
			return dataConnection.QueryProc<PreisResult>("`Preis`",
				new DataParameter("BenutzerNummer", BenutzerNummer, DataType.Int32),
				new DataParameter("MahlzeitenID",   MahlzeitenID,   DataType.Int32));
		}

		public partial class PreisResult
		{
			public decimal Preis { get; set; }
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Benutzer Find(this ITable<Benutzer> table, int Nummer)
		{
			return table.FirstOrDefault(t =>
				t.Nummer == Nummer);
		}

		public static Benutzermbenutzern Find(this ITable<Benutzermbenutzern> table, int BenutzerNummerM, int BenutzerNummerN)
		{
			return table.FirstOrDefault(t =>
				t.BenutzerNummerM == BenutzerNummerM &&
				t.BenutzerNummerN == BenutzerNummerN);
		}

		public static Bestellungen Find(this ITable<Bestellungen> table, int Nummer)
		{
			return table.FirstOrDefault(t =>
				t.Nummer == Nummer);
		}

		public static Bilder Find(this ITable<Bilder> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Deklarationen Find(this ITable<Deklarationen> table, string Zeichen)
		{
			return table.FirstOrDefault(t =>
				t.Zeichen == Zeichen);
		}

		public static Fachbereiche Find(this ITable<Fachbereiche> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Fachbereichemfhangehoerigen Find(this ITable<Fachbereichemfhangehoerigen> table, int FachbereicheID, int FHAngehoerigeID)
		{
			return table.FirstOrDefault(t =>
				t.FachbereicheID  == FachbereicheID &&
				t.FHAngehoerigeID == FHAngehoerigeID);
		}

		public static Fhangehoerige Find(this ITable<Fhangehoerige> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Gaeste Find(this ITable<Gaeste> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Kategorien Find(this ITable<Kategorien> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Kommentare Find(this ITable<Kommentare> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Mahlzeiten Find(this ITable<Mahlzeiten> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Mahlzeitenmbildern Find(this ITable<Mahlzeitenmbildern> table, int MahlzeitenID, int BildID)
		{
			return table.FirstOrDefault(t =>
				t.MahlzeitenID == MahlzeitenID &&
				t.BildID       == BildID);
		}

		public static Mahlzeitenmdeklarationenn Find(this ITable<Mahlzeitenmdeklarationenn> table, int MahlzeitenID, string Deklaration)
		{
			return table.FirstOrDefault(t =>
				t.MahlzeitenID == MahlzeitenID &&
				t.Deklaration  == Deklaration);
		}

		public static Mahlzeitenmzutatenn Find(this ITable<Mahlzeitenmzutatenn> table, int MahlzeitenID, int ZutatenID)
		{
			return table.FirstOrDefault(t =>
				t.MahlzeitenID == MahlzeitenID &&
				t.ZutatenID    == ZutatenID);
		}

		public static Mitarbeiter Find(this ITable<Mitarbeiter> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Preise Find(this ITable<Preise> table, int Jahr, int MahlzeitenID)
		{
			return table.FirstOrDefault(t =>
				t.Jahr         == Jahr &&
				t.MahlzeitenID == MahlzeitenID);
		}

		public static Studenten Find(this ITable<Studenten> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Unterkategorien Find(this ITable<Unterkategorien> table, int ID, int UnterkategorieID)
		{
			return table.FirstOrDefault(t =>
				t.ID               == ID &&
				t.UnterkategorieID == UnterkategorieID);
		}

		public static Zutaten Find(this ITable<Zutaten> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
